// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum ACCOUNT_STATUS {
    SUSPENDED
    ACTIVE
}

enum ROLE {
    ADMIN
    VENDOR
    USER
}

enum STATUS {
    PENDING
    APPROVED
    REJECTED
}

model Product {
    id          String   @id @default(cuid())
    name        String
    createdAt   DateTime @default(now())
    price       Float
    url         String
    updatedAt   DateTime @updatedAt
    reviews     Review[]
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String
    status      STATUS   @default(PENDING)

    @@index([name])
}

model Review {
    id        String   @id @default(cuid())
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String
    content   String
    rating    Int
    product   Product? @relation(fields: [productId], references: [id])
    productId String?
}

// Necessary for Next auth
model Account {
    id                       String         @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    status                   ACCOUNT_STATUS @default(ACTIVE)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    password      String?
    role          ROLE           @default(USER)
    accountStatus ACCOUNT_STATUS @default(ACTIVE)
    accounts      Account[]
    sessions      Session[]
    products      Product[]
    reviews       Review[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
